name: Rust Media Downloader CI/CD

on:
  push:
    branches: [master]
    tags:
      - 'v*'
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build & Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-gnu
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup MinGW (Windows)
        if: matrix.os == 'windows-latest'
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64

      - name: Configure Windows linker
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p ~/.cargo
          cat <<EOF >> ~/.cargo/config.toml
          [target.x86_64-pc-windows-gnu]
          linker = "gcc"
          ar = "ar"
          rustflags = ["-Ctarget-feature=+crt-static"]
          EOF

      - name: Install Dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libssl-dev pkg-config ffmpeg

      - name: Install Dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install ffmpeg

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Generate documentation
        run: cargo doc --no-deps --target ${{ matrix.target }}

      - name: Upload documentation artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: target/${{ matrix.target }}/doc

      - name: Run tests
        run: cargo test --verbose --target ${{ matrix.target }}

      - name: Package binary
        run: |
          mkdir -p dist/${{ matrix.target }}
          cp target/${{ matrix.target }}/release/* dist/${{ matrix.target }}/ || true
          cd dist/${{ matrix.target }}
          case "${{ matrix.os }}" in
            "ubuntu-latest") tar -czf rust-media-downloader-linux.tar.gz * ;;
            "macos-latest") tar -czf rust-media-downloader-macos.tar.gz * ;;
            "windows-latest") 7z a rust-media-downloader-windows.zip * ;;
          esac

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: rust-media-downloader-${{ matrix.os }}
          path: dist/${{ matrix.target }}/*

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4

      - name: Setup Git for GitHub Pages
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

      - name: Deploy documentation to GitHub Pages
        if: github.ref == 'refs/heads/master'
        uses: actions/deploy-pages@v2

      - name: Publish to crates.io
        if: startsWith(github.ref, 'refs/tags/v')
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: |
            */rust-media-downloader-windows.zip
            */rust-media-downloader-linux.tar.gz
            */rust-media-downloader-macos.tar.gz

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build & push
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          docker build -t $DOCKER_USER/rust-media-downloader:latest .
          docker tag $DOCKER_USER/rust-media-downloader:latest $DOCKER_USER/rust-media-downloader:${{ github.ref_name }}
          docker push $DOCKER_USER/rust-media-downloader:latest
          docker push $DOCKER_USER/rust-media-downloader:${{ github.ref_name }}

  sign-commit:
    name: Sign tag with GPG
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4

      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf

      - name: Configure Git & trust GPG key
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git config --global user.signingkey "${{ secrets.GPG_KEY_ID }}"
          git config --global commit.gpgsign true
          echo -e "5\ny\n" | gpg --command-fd 0 --edit-key "${{ secrets.GPG_KEY_ID }}" trust

      - name: Re-sign and push tag
        run: |
          VERSION=${GITHUB_REF##*/}
          git tag -d "$VERSION"
          git tag -s "$VERSION" -m "Signed release $VERSION"
          git push --force origin "refs/tags/$VERSION"
