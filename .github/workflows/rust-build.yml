name: rust-downloader CI/CD

on:
  push:
    branches:
      - master
    tags:
      - 'v*' # Détection des tags de version pour release/crates.io
  pull_request:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Nécessaire pour récupérer les tags Git

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Installer les dépendances système
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            curl \
            git \
            build-essential \
            clang \
            lld \
            musl-dev \
            pkg-config \
            gcc-mingw-w64 \
            mingw-w64 \
            cabextract \
            unzip
          rm -rf /var/lib/apt/lists/*
          cargo install cargo-deb

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Ajouter des cibles de compilation croisée
        run: |
          rustup target add x86_64-unknown-linux-gnu
          rustup target add x86_64-pc-windows-gnu
          rustup target add x86_64-apple-darwin || echo "macOS target not available"

      - name: Exécuter les tests
        run: cargo test --release

      - name: Construire le binaire Linux
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Construire le binaire Windows
        run: cargo build --release --target x86_64-pc-windows-gnu

      - name: Construire le binaire macOS
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            cargo build --release --target x86_64-apple-darwin
          else
            echo "Skipping macOS build on non-macOS runner"
          fi

      - name: Générer le package .deb
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            cargo deb --no-build
          else
            echo "Skipping .deb packaging on non-Linux runner"
          fi

      - name: Empaqueter le binaire Windows en .zip
        run: |
          mkdir -p dist
          cp target/x86_64-pc-windows-gnu/release/rust-downloader.exe dist/rust-downloader-windows.exe
          zip -j dist/rust-downloader-windows.zip dist/rust-downloader-windows.exe

      - name: Empaqueter le binaire macOS en .tar.gz
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            mkdir -p dist
            cp target/x86_64-apple-darwin/release/rust-downloader dist/rust-downloader-macos
            tar -czvf dist/rust-downloader-macos.tar.gz dist/rust-downloader-macos
          else
            echo "Skipping macOS packaging on non-macOS runner"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: dist/*

      - name: Construire l'image Docker
        if: success()
        run: docker build -t rust-downloader .

      - name: Pousser l'image Docker vers DockerHub
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          TAG_NAME=${GITHUB_REF#refs/tags/}
          docker tag rust-downloader $DOCKER_USERNAME/rust-downloader:$TAG_NAME
          docker push $DOCKER_USERNAME/rust-downloader:$TAG_NAME
          docker tag rust-downloader $DOCKER_USERNAME/rust-downloader:latest
          docker push $DOCKER_USERNAME/rust-downloader:latest

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: dist

      - name: Créer une version GitHub
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Publier sur crates.io
        run: cargo publish --no-verify
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  sign-commit:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Nécessaire pour signer proprement un tag

      - name: Importer la clé GPG
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          echo "trust-model always" >> ~/.gnupg/gpg.conf
          echo -e "5\\ny\\n" |  gpg --command-fd 0 --expert --edit-key $GPG_KEY_ID trust
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Configurer Git
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global commit.gpgsign true
          git config --global user.signingkey $GPG_KEY_ID
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Recreate signed tag
        run: |
          VERSION="${{ github.ref_name }}"
          git tag -d "$VERSION" || true
          git tag -s "$VERSION" -m "Signed release $VERSION" -u "$GPG_KEY_ID"
          git push --force origin "refs/tags/$VERSION"
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
