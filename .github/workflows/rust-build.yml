name: Rust Media Downloader CI/CD

on:
  push:
    branches:
      - master
    tags:
      - 'v*' # Détection des tags de version pour release/crates.io
  pull_request:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            deb: true
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            zip: true
          - os: macos-latest
            target: x86_64-apple-darwin
            tar: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Nécessaire pour récupérer les tags

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Installer les dépendances système (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            curl \
            git \
            build-essential \
            clang \
            libssl-dev \
            zlib1g-dev \
            llvm \
            libclang-dev \
            pkg-config
          sudo rm -rf /var/lib/apt/lists/*

      - name: Installer les dépendances système (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install curl git llvm

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ matrix.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.os }}-${{ matrix.target }}-

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Exécuter les tests
        run: cargo test --release --target ${{ matrix.target }}
        # Changed this to use matrix

      - name: Générer le package .deb
        if: matrix.deb
        run: |
          cargo install cargo-deb
          cargo deb --no-build --target ${{ matrix.target }}
          mkdir -p dist
          mv target/debian/*.deb dist/

      - name: Empaqueter le binaire Windows en .zip
        if: matrix.zip
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/rust-downloader.exe dist/rust-downloader-windows.exe
          zip -j dist/rust-downloader-windows.zip dist/rust-downloader-windows.exe

      - name: Empaqueter le binaire macOS en .tar.gz
        if: matrix.tar
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/rust-downloader dist/rust-downloader-macos
          tar -czvf dist/rust-downloader-macos.tar.gz dist/rust-downloader-macos

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.target }}
          path: dist/*
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Set up Git for GitHub Pages
        if: github.ref == 'refs/heads/master'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/master'
        run: |
          mkdir -p public
          touch public/.nojekyll
          cp dist/* public/
          git add public
          git commit -m "Deploy to GitHub Pages"
          git push origin --force --orphan-branch gh-pages
      - name: Publish to crates.io
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sign-commit:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # nécessaire pour signer proprement un tag

      - name: Importer la clé GPG
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          echo "trust-model always" >> ~/.gnupg/gpg.conf
          echo -e "5\\ny\\n" |  gpg --command-fd 0 --expert --edit-key $GPG_KEY_ID trust
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Configurer Git
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global commit.gpgsign true
          git config --global user.signingkey $GPG_KEY_ID
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Recreate signed tag
        run: |
          VERSION="${{ github.ref_name }}"
          git tag -d "$VERSION" || true
          git tag -s "$VERSION" -m "Signed release $VERSION" -u "$GPG_KEY_ID"
          git push --force origin "refs/tags/$VERSION"
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
